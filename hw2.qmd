---
title: "Homework 2"
author: "Nithika Radhakrishnan {style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
---

[Link to the Github repository](https://github.com/STAT380/hw2.git)

---

::: {.callout-important style="font-size: 0.8em;"}
## Due: Feb 9, 2024 @ 11:59pm

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Abalone dataset](http://archive.ics.uci.edu/ml/datasets/Abalone) from the UCI Machine Learning Repository. The dataset consists of physical measurements of abalone (a type of marine snail) and includes information on the age, sex, and size of the abalone.

We will be using the following libraries:

```R
install.packages("readr")
install.packages("tidyr")
install.packages("gggplot2")
install.packages("dplyr")
install.packages("purrr")
install.packages("cowplot")
install.packages("tibble")

library(readr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(purrr)
library(cowplot)
library(tibble)
```


<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 30 points
EDA using `readr`, `tidyr` and `ggplot2`
:::

###### 1.1 (5 points)

Load the "Abalone" dataset as a tibble called `abalone` using the URL provided below. The `abalone_col_names` variable contains a vector of the column names for this dataset (to be consistent with the R naming pattern). Make sure you read the dataset with the provided column names. 



```{R}
library(readr)
library(tibble)
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"

abalone_col_names <- c(
  "sex", 
  "length", 
  "diameter", 
  "height", 
  "whole_weight", 
  "shucked_weight", 
  "viscera_weight", 
  "shell_weight", 
  "rings"
)

abalone <-  read_csv(url, col_names = abalone_col_names)

abalone <- as_tibble(abalone)

# This will show a preview of the dataset
head(abalone)
```

```{R}

```


---

###### 1.2 (5 points)

Remove missing values and `NA`s from the dataset and store the cleaned data in a tibble called `df`. How many rows were dropped?

```{R}

 # Remove rows with any NA values
df <- na.omit(abalone)

# tible conversion
df <- as_tibble(df)

# Calculate how many rows were dropped
rows_dropped <- nrow(abalone) - nrow(df)

# Print the number of rows dropped
print(rows_dropped)

```
0 rows are dropped


---

##### 1.3 (5 points)

Plot histograms of all the quantitative variables in a **single plot** [^footnote_facet_wrap]

```{R}
 # Insert your code here
  library(ggplot2)


df_long <- tidyr::gather(df, key = "variable", value = "value", -sex)


ggplot(df_long, aes(x = value)) +
  geom_histogram(bins = 30, fill = "purple", color = "yellow") + 
  facet_wrap(~ variable, scales = "free_x") + 
  theme_minimal() +
  labs(title = "Histograms of Quantitative Variables in the Abalone Dataset",
       x = "Value of Abalone ",
       y = "Frequency of Abalone")

```


---

##### 1.4 (5 points)

Create a boxplot of `length` for each `sex` and create a violin-plot of of `diameter` for each `sex`. Are there any notable differences in the physical appearences of abalones based on your analysis here?

```{R}
library(ggplot2)
boxplot_length <- ggplot(df, aes(x = sex, y = length)) +
  geom_boxplot() +
  labs(title = "Boxplot of Length for Each Sex",
       x = "Sex for Abalones",
       y = "Length for Abaloness")
print(boxplot_length)
```

```{R}
# Insert your code for violinplot here
violinplot_diameter <- ggplot(df, aes(x = sex, y = diameter)) +
  geom_violin() +
  labs(title = "Violin Plot of Diameter for Each Sex",
       x = "Sex of Abalone ",
       y = "Diameter of Abalone")
print(violinplot_diameter)
```
The physical differences include the violinplot being more circular and the geomplot being like a box.
---

###### 1.5  (5 points)

Create a scatter plot of `length` and `diameter`, and modify the shape and color of the points based on the `sex` variable. Change the size of each point based on the `shell_wight` value for each observation. Are there any notable anomalies in the dataset?



```{R}
  
 #Insert your code here
 
 library(ggplot2)

# Scatter plot of length vs diameter
ggplot(df, aes(x = length, y = diameter, color = sex, shape = sex, size = shell_weight)) +
  geom_point(alpha = 0.6) + 
  scale_size_continuous(range = c(1, 20)) +  
  theme_minimal() +  
  labs(title = "Scatter Plot of Length vs Diameter by Sex with Shell Weight Size",
       x = "Length of Shell Weight Size ",
       y = "Diameter of Shell Weight Size",
       size = "Shell Weight") +
  theme(legend.position = "right")  # Adjust legend position

```
The anomalies occur in (.2,.4), (.21,.14), (.24,.13).
---

###### 1.6 (5 points)

For each `sex`, create separate scatter plots of `length` and `diameter`. For each plot, also add a **linear** trendline to illustrate the relationship between the variables. Use the `facet_wrap()` function in R for this, and ensure that the plots are vertically stacked **not** horizontally. You should end up with a plot that looks like this: [^footnote_plot_facet]


```{R}
library(ggplot2)

ggplot(df, aes(x = length, y = diameter)) +
  geom_point(aes(color = sex), alpha = 0.6) +  # colored by sex
  geom_smooth(method = "lm", aes(color = sex), se = FALSE) +  # Add linear trendline, without confidence interval
  facet_wrap(~ sex, scales = "free", ncol = 1) +  # stack plots
  theme_minimal() +
  labs(title = "Length vs Diameter by Sex with Linear Trendline",
       x = "Length",
       y = "Diameter") +
  scale_color_manual(values = c("Male" = "blue", "Female" = "black", "Infant" = "yellow"))  

```





<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 40 points
More advanced analyses using `dplyr`, `purrrr` and `ggplot2`
:::


---

###### 2.1 (10 points)

Filter the data to only include abalone with a length of at least $0.5$ meters. Group the data by `sex` and calculate the mean of each variable for each group. Create a bar plot to visualize the mean values for each variable by `sex`.


```{R}
library(dplyr)
library(tidyr)
library(ggplot2)

#  Filter the dataset
filtered_df <- df %>%
  filter(length >= 0.5)

# Group by 'sex' and calculate the mean 
grouped_means <- filtered_df %>%
  group_by(sex) %>%
  summarise(across(c(length, diameter, height, whole_weight, shucked_weight, viscera_weight, shell_weight, rings), mean, na.rm = TRUE))

long_df <- pivot_longer(grouped_means, -sex, names_to = "variable", values_to = "mean")

# Create a bar plot
ggplot(long_df, aes(x = variable, y = mean, fill = sex)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(title = "Mean Values of Variables by Sex for Abalones with Length >= 0.5m",
       x = "Variable",
       y = "Mean") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for clarity
```


---

###### 2.2 (15 points)

Implement the following in a **single command**:

1. Temporarily create a new variable called `num_rings` which takes a value of:

  * `"low"` if `rings < 10`
  * `"high"` if `rings > 20`, and
  * `"med"` otherwise

2. Group `df` by this new variable and `sex` and compute `avg_weight` as the average of the `whole_weight + shucked_weight + viscera_weight + shell_weight` for each combination of `num_rings` and `sex`. 

3. Use the `geom_tile()` function to create a tile plot of `num_rings` vs `sex` with the color indicating of each tile indicating the `avg_weight` value. 


```{R}
library(dplyr)
library(ggplot2)

df %>%
  mutate(
    num_rings = case_when(
      rings < 10 ~ "low",
      rings > 20 ~ "high",
      TRUE ~ "med"
    ),
    avg_weight = (whole_weight + shucked_weight + viscera_weight + shell_weight) / 4
  ) %>%
  group_by(num_rings, sex) %>%
  summarise(avg_weight = mean(avg_weight, na.rm = TRUE)) %>%
  ggplot(aes(x = sex, y = num_rings, fill = avg_weight)) +
  geom_tile() +
  scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
  labs(title = "Average Weight by Num_Rings and Sex", x = "Sex", y = "Num Rings", fill = "Avg Weight") +
  theme_minimal()

```



---

###### 2.3 (5 points)

Make a table of the pairwise correlations between all the numeric variables rounded to 2 decimal points. Your final answer should look like this [^footnote_table]


```{R}
library(dplyr)

numeric_df <- select_if(df, is.numeric)


correlations <- cor(numeric_df)


rounded_correlations <- round(correlations, 2)

# Display.   table
print(rounded_correlations)

# Optionally, for a nicer table format in R Markdown or interactive R sessions, use:
# knitr::kable(rounded_correlations, caption = "Pairwise Correlations Between Numeric Variables")

```



---

###### 2.4 (10 points)

Use the `map2()` function from the `purrr` package to create a scatter plot for each _quantitative_ variable against the number of `rings` variable. Color the points based on the `sex` of each abalone. You can use the `cowplot::plot_grid()` function to finally make the following grid of plots.

:::{.content-visible when-format="html"}
![](images/plot_grid.png)
:::


```{R}
library(ggplot2)
library(purrr)
library(cowplot)
library(dplyr)


quantitative_vars <- select(df, where(is.numeric)) %>% select(-rings) %>% names()


plots <- map(quantitative_vars, function(var) {
  ggplot(df, aes_string(x = var, y = "rings", color = "sex")) +
    geom_point() +
    labs(title = var, x = var, y = "Rings") +
    theme_minimal()
})


plot_grid(plotlist = plots, ncol = 3) 

```



<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 30 points

Linear regression using `lm`
:::

---

###### 3.1 (10 points)

Perform a simple linear regression with `diameter` as the covariate and `height` as the response. Interpret the model coefficients and their significance values. 


```{R}
model <- lm(height ~ diameter, data = df)


summary_model <- summary(model)

print(summary_model)

```
The model coefficient values include the intercept which is the height when the diameter is 0 this .0019. The diameter is the slope change being that of .351. The r^2 value is .695 me. The p value is basically zero which means it is ua  good indicator and stat significant.


---

###### 3.2 (10 points)

Make a scatterplot of `height` vs `diameter` and plot the regression line in `color="red"`. You can use the base `plot()` function in R for this. Is the linear model an appropriate fit for this relationship? Explain. 


```{R}
 # Fit the linear regression model
model <- lm(height ~ diameter, data = df)

# Create the scatterplot
plot(df$diameter, df$height, 
     xlab = "Diameter", 
     ylab = "Height", 
     main = "Scatterplot of Height vs Diameter with Regression Line",
     pch = 19, col = "purple")

abline(model, col = "red")

```



---

###### 3.3  (10 points)

Suppose we have collected observations for "new" abalones with `new_diameter` values given below. What is the expected value of their `height` based on your model above? Plot these new observations along with your predictions in your plot from earlier using `color="violet"`

```{R}

new_diameter <- c(
  0.15218946,
  0.48361548,
  0.58095513,
  0.07603687,
  0.50234599,
  0.83462092,
  0.95681938,
  0.92906875,
  0.94245437,
  0.01209518
)




# Predicting height for the new diameters
new_height_pred <- predict(model, newdata = data.frame(diameter = new_diameter))

#display height predictions 
print("the new height is")
new_height_pred

# Plot the original scatterplot and regression line
plot(df$diameter, df$height, 
     xlab = "Diameter", 
     ylab = "Height", 
     main = "Height vs Diameter with New Observations",
     pch = 19, col = "yellow")
abline(model, col = "orange")


points(new_diameter, new_height_pred, pch = 17, col = "violet", cex = 1.5)

legend("topleft", legend = c("Original Data", "Regression Line", "New Predictions"),
       col = c("yellow", "orange", "violet"), pch = c(19, NA, 17), lty = c(NA, 1, NA))

```





:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---


# Appendix

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::

[^footnote_facet_wrap]:
  You can use the `facet_wrap()` function for this. Have a look at its documentation using the help console in R

[^footnote_plot_facet]:
  Plot example for 1.6<br>
  [![](images/lines.png){style="height: 5em;"}]{.content-visible when-format="html"}

[^footnote_table]:
  Table for 2.3<br>

:::{.content-visible when-format="html"}

| length| diameter| height| whole_weight| shucked_weight| viscera_weight| shell_weight| rings|
|:--------------|------:|--------:|------:|------------:|--------------:|--------------:|------------:|-----:|
|length         |   1.00|     0.99|   0.83|         0.93|           0.90|           0.90|         0.90|  0.56|
|diameter       |   0.99|     1.00|   0.83|         0.93|           0.89|           0.90|         0.91|  0.57|
|height         |   0.83|     0.83|   1.00|         0.82|           0.77|           0.80|         0.82|  0.56|
|whole_weight   |   0.93|     0.93|   0.82|         1.00|           0.97|           0.97|         0.96|  0.54|
|shucked_weight |   0.90|     0.89|   0.77|         0.97|           1.00|           0.93|         0.88|  0.42|
|viscera_weight |   0.90|     0.90|   0.80|         0.97|           0.93|           1.00|         0.91|  0.50|
|shell_weight   |   0.90|     0.91|   0.82|         0.96|           0.88|           0.91|         1.00|  0.63|
|rings          |   0.56|     0.57|   0.56|         0.54|           0.42|           0.50|         0.63|  1.00|

:::
